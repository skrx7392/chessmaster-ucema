package ar.com.ucema.ia.chess.model;/** * Reprsenta una jugada. *  * @author matiassuarez */public abstract class ChessMovement {	private ChessCell to;	private ChessCell from;	private ChessBoard board;	public ChessMovement() {		super();	}	public ChessMovement(ChessCell from, ChessCell to, ChessBoard board) {		super();		this.to = to;		this.from = from;		this.board = board;	}	public ChessMovement(ChessCell from, ChessCell to) {		super();		this.to = to;		this.from = from;	}			public ChessCell getTo() {		return to;	}	public void setTo(ChessCell to) {		this.to = to;	}	public ChessCell getFrom() {		return from;	}	public void setFrom(ChessCell from) {		this.from = from;	}	public ChessBoard getBoard() {		return board;	}	public void setBoard(ChessBoard board) {		this.board = board;	}			/**	 * Checks to see if the movement leaves the king in a check state.	 * @param move the movement.	 * @return true if the king is in check after the move, false otherwise.	 */	public abstract boolean leavesKingInCheck(ChessMovement move);			@Override	public String toString() {		String move = from.getColumn() + from.getRow() + " to " + to.getColumn() + to.getRow();		return move;	}				}
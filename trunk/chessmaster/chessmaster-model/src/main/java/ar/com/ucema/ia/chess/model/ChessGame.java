package ar.com.ucema.ia.chess.model;import org.dom4j.Document;import org.dom4j.DocumentHelper;import org.dom4j.Element;import aima.search.framework.GraphSearch;import aima.search.framework.Problem;import aima.search.framework.Search;import aima.search.informed.AStarSearch;import ar.com.ucema.ia.chess.iama.ChessGoalTest;import ar.com.ucema.ia.chess.iama.ChessHeuristicFunction;import ar.com.ucema.ia.chess.iama.ChessInteligentAgent;import ar.com.ucema.ia.chess.iama.ChessSuccessorFunction;/** *  * @author matiassuarez * */public class ChessGame {	private static ChessGame game = new ChessGame();	private ChessBoard board;	private Color colorToPlayNext;	private ChessGame() {		this.board = new ChessBoard();		this.colorToPlayNext = Color.White;	}		public static ChessGame getInstance() {		return game;	}	public Color getColorToPlayNext() {		return colorToPlayNext;	}	public ChessBoard getBoard() {		return board;	}	public void setBoard(ChessBoard board) {		this.board = board;	}	public Document toXML() {		Document doc = DocumentHelper.createDocument();		Element root = doc.addElement("game");		board.toXML(root);				return doc;	}	public void playWhite(ChessPlay aPlay) {		ChessMovement move = buildMovementFor(aPlay);		ChessBoard board = game.getBoard();				Boolean movementMade = board.moveWithThis(move);		if ( movementMade )			game.colorToPlayNext = game.getColorToPlayNext().negate();	}			private ChessMovement buildMovementFor(ChessPlay aPlay) {		ChessCell from = new ChessCell(aPlay.getColumnFrom(), aPlay.getRowFrom());		ChessCell to = new ChessCell(aPlay.getColumnTo(), aPlay.getRowTo());		ChessGame game = ChessGame.getInstance();				ChessMovement move = (game.getColorToPlayNext().equals(Color.White)) ? new WhitePieceChessMovement(from, to, game.getBoard()) : new BlackPieceChessMovement(from, to, game.getBoard());		return move;	}	public void playBlack() {		try {			Problem problem = new Problem(ChessGame.getInstance().getBoard(), new ChessSuccessorFunction(), new ChessGoalTest(), new ChessHeuristicFunction());			Search search = new AStarSearch(new GraphSearch());			ChessInteligentAgent agent = new ChessInteligentAgent(problem, search);						 agent.printActions();			 agent.printInstrumentation();		} 		catch (Exception e) {			e.printStackTrace();		}	}			public static void main(String[] args) {		ChessGame.getInstance().playBlack();	}}
package ar.com.ucema.ia.chess.movement.fixtures;import junit.framework.TestCase;import ar.com.ucema.ia.chess.model.ChessBoard;import ar.com.ucema.ia.chess.model.ChessCell;import ar.com.ucema.ia.chess.model.ChessColumns;import ar.com.ucema.ia.chess.model.Color;import ar.com.ucema.ia.chess.model.WhitePieceChessMovement;import ar.com.ucema.ia.chess.model.pieces.King;import ar.com.ucema.ia.chess.model.pieces.Pawn;public class KingMovementTestCase extends TestCase {	public void testValidWhiteKingMoveAheadWithNoKingCheck() {		ChessBoard board = new ChessBoard(true);		King king = new King(Color.White);				board.setPieceAt(ChessColumns.A, 2, king);				assertTrue(king.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A,2), new ChessCell(ChessColumns.A,1), board)));		assertTrue(king.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A,2), new ChessCell(ChessColumns.B,2), board)));		assertFalse(king.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A,2), new ChessCell(ChessColumns.B,4), board)));		assertFalse(king.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A,2), new ChessCell(ChessColumns.B,4), board)));		assertTrue(king.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A,2), new ChessCell(ChessColumns.B,3), board)));		assertTrue(king.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2), new ChessCell(ChessColumns.B,1), board)));			}		public void testInvalidWhiteKingMoveAheadWithNoKingCheck() {		ChessBoard board = new ChessBoard(true);		King king = new King(Color.White);		Pawn pawn = new Pawn(Color.White);		board.setPieceAt(ChessColumns.A, 2, king);		board.setPieceAt(ChessColumns.A, 3, pawn);				assertFalse(king.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2, king), new ChessCell(ChessColumns.A,3, pawn), board)));	}}
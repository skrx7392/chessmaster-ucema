package ar.com.ucema.ia.chess.movement.fixtures;import junit.framework.TestCase;import ar.com.ucema.ia.chess.model.ChessBoard;import ar.com.ucema.ia.chess.model.ChessCell;import ar.com.ucema.ia.chess.model.ChessColumns;import ar.com.ucema.ia.chess.model.Color;import ar.com.ucema.ia.chess.model.WhitePieceChessMovement;import ar.com.ucema.ia.chess.model.pieces.Pawn;import ar.com.ucema.ia.chess.model.pieces.Rook;public class RookMovementTestCase extends TestCase {		/**	 * Teste el movimiento valido de un peon blanco que se mueve una posicion adelante sin que ponga el rey en jaque.	 * 	 */	public void testValidWhiteRookMoveAheadWithNoKingCheckAndNoPiecesInBetween() {		ChessBoard board = new ChessBoard(true);		Rook rook = new Rook(Color.White);				board.setPieceAt(ChessColumns.A, 2, rook);				assertTrue(rook.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.A,8), board)));		assertTrue(rook.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.A,1), board)));		assertTrue(rook.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.H,2), board)));	}	/**	 * Teste el movimiento valido de un peon blanco que se mueve una posicion adelante sin que ponga el rey en jaque.	 * 	 */	public void testWhiteRookMoveAheadWithNoKingCheckAndPiecesInBetween() {		ChessBoard board = new ChessBoard(true);		Rook rook = new Rook(Color.White);		Pawn pawn = new Pawn(Color.Black);				board.setPieceAt(ChessColumns.A, 2, rook);		board.setPieceAt(ChessColumns.A, 4, pawn);		board.setPieceAt(ChessColumns.F, 2, pawn);				assertFalse(rook.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.A,8), board)));		assertFalse(rook.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.H,2), board)));				assertTrue(rook.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.A,4), board)));	}}
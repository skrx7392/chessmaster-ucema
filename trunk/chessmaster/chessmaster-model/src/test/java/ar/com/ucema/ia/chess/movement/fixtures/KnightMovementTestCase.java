package ar.com.ucema.ia.chess.movement.fixtures;import junit.framework.TestCase;import ar.com.ucema.ia.chess.model.ChessBoard;import ar.com.ucema.ia.chess.model.ChessCell;import ar.com.ucema.ia.chess.model.ChessColumns;import ar.com.ucema.ia.chess.model.Color;import ar.com.ucema.ia.chess.model.WhitePieceChessMovement;import ar.com.ucema.ia.chess.model.pieces.Knight;import ar.com.ucema.ia.chess.model.pieces.Pawn;public class KnightMovementTestCase extends TestCase {		public void testValidWhiteKnightMoveAheadWithNoKingCheck() {		ChessBoard board = new ChessBoard(true);		Knight knight = new Knight(Color.White);				board.setPieceAt(ChessColumns.E, 4, knight);				assertTrue(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.G,3), board)));		assertTrue(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.C,3), board)));		assertTrue(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.G,5), board)));		assertTrue(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.C,5), board)));		assertFalse(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.E,5), board)));		assertFalse(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.H,3), board)));		assertFalse(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.E,8), board)));	}		public void testValidWhiteKnightMoveAheadWithNoKingCheckAndPieceAtDestination() {		ChessBoard board = new ChessBoard(true);		Knight knight = new Knight(Color.White);		Pawn pawn = new Pawn(Color.White);				board.setPieceAt(ChessColumns.E, 4, knight);		board.setPieceAt(ChessColumns.C, 3, pawn);		board.setPieceAt(ChessColumns.C, 5, pawn);		board.setPieceAt(ChessColumns.G, 5, pawn);				assertTrue(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.G,3), board)));		assertFalse(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.C,3), board)));		assertFalse(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.G,5), board)));		assertFalse(knight.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.C,5), board)));	}			}
package ar.com.ucema.ia.chess.movement.fixtures;import junit.framework.TestCase;import ar.com.ucema.ia.chess.model.ChessBoard;import ar.com.ucema.ia.chess.model.ChessCell;import ar.com.ucema.ia.chess.model.ChessColumns;import ar.com.ucema.ia.chess.model.Color;import ar.com.ucema.ia.chess.model.WhitePieceChessMovement;import ar.com.ucema.ia.chess.model.pieces.Pawn;import ar.com.ucema.ia.chess.model.pieces.Queen;public class QueenMovementTestCase extends TestCase {		public void testValidWhiteQueenMoveAheadWithNoKingCheckAndNoPiecesInBetween() {		ChessBoard board = new ChessBoard(true);		Queen queen = new Queen(Color.White);				board.setPieceAt(ChessColumns.D, 2, queen);				assertTrue(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.D, 2),new ChessCell(ChessColumns.D,8), board)));		assertTrue(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.D, 2),new ChessCell(ChessColumns.D,1), board)));		assertTrue(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.D, 2),new ChessCell(ChessColumns.H,2), board)));		assertTrue(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.D, 2),new ChessCell(ChessColumns.G,5), board)));		assertTrue(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.D, 2),new ChessCell(ChessColumns.A,2), board)));			}	public void testWhiteQueenMoveAheadWithNoKingCheckAndPiecesInBetween() {		ChessBoard board = new ChessBoard(true);		Queen queen = new Queen(Color.White);		Pawn pawn = new Pawn(Color.Black);				board.setPieceAt(ChessColumns.A, 2, queen);		board.setPieceAt(ChessColumns.A, 4, pawn);		board.setPieceAt(ChessColumns.C, 4, pawn);		board.setPieceAt(ChessColumns.F, 2, pawn);		board.setPieceAt(ChessColumns.D, 5, pawn);				assertFalse(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.A,8), board)));		assertFalse(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.A, 2),new ChessCell(ChessColumns.H,2), board)));				board.setPieceAt(ChessColumns.D, 2, queen);		board.setPieceAt(ChessColumns.G, 5, pawn);		assertTrue(queen.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.D, 2),new ChessCell(ChessColumns.G,5), board)));	}}
package ar.com.ucema.ia.chess.movement.fixtures;import junit.framework.TestCase;import ar.com.ucema.ia.chess.model.ChessBoard;import ar.com.ucema.ia.chess.model.ChessCell;import ar.com.ucema.ia.chess.model.ChessColumns;import ar.com.ucema.ia.chess.model.Color;import ar.com.ucema.ia.chess.model.WhitePieceChessMovement;import ar.com.ucema.ia.chess.model.pieces.Bishop;import ar.com.ucema.ia.chess.model.pieces.Pawn;public class BishopMovementTestCase extends TestCase {		public void testValidWhiteBishopMoveAheadWithNoKingCheck() {		ChessBoard board = new ChessBoard(true);		Bishop bishop = new Bishop(Color.White);				board.setPieceAt(ChessColumns.E, 4, bishop);				assertTrue(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.B,1), board)));		assertTrue(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.C,6), board)));		assertTrue(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.F,3), board)));		assertTrue(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.G,6), board)));				assertFalse(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.E,6), board)));		assertFalse(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.E,1), board)));		assertFalse(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.D,1), board)));		assertFalse(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.H,2), board)));	}		public void testWhiteBishopMoveAheadWithNoKingCheckAndPieceAtDestination() {		ChessBoard board = new ChessBoard(true);		Bishop bishop = new Bishop(Color.White);		Pawn pawn = new Pawn(Color.Black);				board.setPieceAt(ChessColumns.E, 4, bishop);		board.setPieceAt(ChessColumns.C, 2, pawn);		board.setPieceAt(ChessColumns.D, 5, pawn);		board.setPieceAt(ChessColumns.F, 5, pawn);				assertFalse(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.B,1), board)));		assertFalse(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.C,6), board)));		assertFalse(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.G,6), board)));		assertTrue(bishop.isValidMove(new WhitePieceChessMovement(new ChessCell(ChessColumns.E, 4),new ChessCell(ChessColumns.F,3), board)));	}				}